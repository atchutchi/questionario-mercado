# Generated by Django 5.1.2 on 2024-11-14 16:40

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(error_messages={'unique': 'Este email já está registrado no sistema.'}, max_length=254, unique=True, verbose_name='email address')),
                ('is_approved', models.BooleanField(default=False, help_text='Indica se este usuário foi aprovado por um administrador.', verbose_name='approved')),
                ('approval_date', models.DateTimeField(blank=True, null=True, verbose_name='approval date')),
                ('company', models.CharField(blank=True, help_text='Nome da empresa ou organização', max_length=100, verbose_name='empresa')),
                ('position', models.CharField(blank=True, help_text='Cargo ou posição na empresa', max_length=100, verbose_name='cargo')),
                ('phone_number', models.CharField(blank=True, help_text='Número de telefone para contato', max_length=20, verbose_name='telefone')),
                ('is_operator', models.BooleanField(default=False, help_text='Indica se este usuário é um operador de telecomunicações', verbose_name='operador')),
                ('operator_type', models.CharField(blank=True, choices=[('MOBILE', 'Operador Móvel'), ('FIXED', 'Operador Fixo'), ('ISP', 'Provedor de Internet'), ('MVNO', 'Operador Móvel Virtual')], max_length=50, null=True, verbose_name='tipo de operador')),
                ('last_activity', models.DateTimeField(blank=True, null=True, verbose_name='última atividade')),
                ('notes', models.TextField(blank=True, help_text='Notas administrativas sobre o usuário', verbose_name='notas')),
                ('require_password_change', models.BooleanField(default=False, verbose_name='requer mudança de senha')),
                ('account_locked', models.BooleanField(default=False, verbose_name='conta bloqueada')),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, verbose_name='tentativas de login falhas')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='custom_user_groups', related_query_name='custom_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_permissions', related_query_name='custom_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'usuário',
                'verbose_name_plural': 'usuários',
                'permissions': [('approve_user', 'Can approve user registration'), ('view_dashboard', 'Can view dashboard'), ('manage_operators', 'Can manage operators')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='OperatorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operator_name', models.CharField(max_length=100, verbose_name='nome do operador')),
                ('license_number', models.CharField(max_length=50, unique=True, verbose_name='número da licença')),
                ('license_expiry', models.DateField(blank=True, null=True, verbose_name='validade da licença')),
                ('service_areas', models.JSONField(default=list, help_text='Regiões onde o operador atua', verbose_name='áreas de serviço')),
                ('technical_contact', models.JSONField(default=dict, help_text='Informações do contato técnico', verbose_name='contato técnico')),
                ('is_active', models.BooleanField(default=True, verbose_name='ativo')),
                ('registration_date', models.DateTimeField(auto_now_add=True, verbose_name='data de registro')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='última atualização')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='operator_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'perfil de operador',
                'verbose_name_plural': 'perfis de operadores',
                'ordering': ['-registration_date'],
            },
        ),
        migrations.CreateModel(
            name='UserPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission_name', models.CharField(choices=[('view_data', 'Visualizar Dados'), ('edit_data', 'Editar Dados'), ('approve_data', 'Aprovar Dados'), ('manage_operators', 'Gerenciar Operadores'), ('generate_reports', 'Gerar Relatórios')], max_length=100, verbose_name='nome da permissão')),
                ('description', models.TextField(blank=True, verbose_name='descrição')),
                ('granted_at', models.DateTimeField(auto_now_add=True, verbose_name='concedido em')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='expira em')),
                ('is_active', models.BooleanField(default=True, verbose_name='ativo')),
                ('granted_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='permissions_granted', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'permissão de usuário',
                'verbose_name_plural': 'permissões de usuário',
                'ordering': ['-granted_at'],
                'unique_together': {('user', 'permission_name')},
            },
        ),
    ]
